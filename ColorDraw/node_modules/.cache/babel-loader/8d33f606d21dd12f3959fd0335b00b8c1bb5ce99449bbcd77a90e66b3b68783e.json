{"ast":null,"code":"var _jsxFileName = \"/Users/hwoodie/Desktop/Projects/Color Draw/my-app/src/Components/Canvas.js\",\n  _s = $RefreshSig$();\nimport '../CSS/canvas.css';\nimport React from 'react';\nimport { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Canvas({\n  strokeColor,\n  lineWidth,\n  canvasRef\n}) {\n  _s();\n  const isPainting = useRef(false);\n  let ctx;\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      alert('canvas not found');\n      return;\n    }\n    ctx = canvas.getContext('2d');\n    if (!ctx) {\n      alert('canvas context not found');\n      return;\n    }\n    const canvasOffsetX = canvas.offsetLeft;\n    const canvasOffsetY = canvas.offsetTop;\n    canvas.width = window.innerWidth - canvasOffsetX;\n    canvas.height = window.innerHeight - canvasOffsetY;\n    let startX;\n    let startY;\n    const rect = canvas.getBoundingClientRect();\n    function draw(e) {\n      if (!isPainting.current) {\n        return;\n      }\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      ctx.lineWidth = lineWidth.current;\n      ctx.lineCap = 'round';\n      ctx.strokeStyle = strokeColor.current;\n\n      // ctx.lineTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n      ctx.lineTo(mouseX, mouseY);\n      ctx.stroke();\n    }\n    const handleMouseDown = e => {\n      isPainting.current = true;\n      startX = e.clientX - canvasOffsetX;\n      startY = e.clientY - canvasOffsetY;\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      ctx.beginPath();\n      ctx.moveTo(mouseX, mouseY);\n    };\n    const handleMouseUp = e => {\n      isPainting.current = false;\n      ctx.closePath();\n    };\n    canvas.addEventListener('mousedown', handleMouseDown);\n    canvas.addEventListener('mouseup', handleMouseUp);\n    canvas.addEventListener('mousemove', draw);\n    return () => {\n      canvas.removeEventListener('mousedown', handleMouseDown);\n      canvas.removeEventListener('mouseup', handleMouseUp);\n      canvas.removeEventListener('mousemove', draw);\n    };\n  }, [lineWidth, strokeColor]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"drawingCanvas\",\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(Canvas, \"CLbK6fr5EhjaXEjxShqFoMxw3Uk=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","strokeColor","lineWidth","canvasRef","_s","isPainting","ctx","canvas","current","alert","getContext","canvasOffsetX","offsetLeft","canvasOffsetY","offsetTop","width","window","innerWidth","height","innerHeight","startX","startY","rect","getBoundingClientRect","draw","e","mouseX","clientX","left","mouseY","clientY","top","lineCap","strokeStyle","lineTo","stroke","handleMouseDown","beginPath","moveTo","handleMouseUp","closePath","addEventListener","removeEventListener","children","id","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hwoodie/Desktop/Projects/Color Draw/my-app/src/Components/Canvas.js"],"sourcesContent":["import '../CSS/canvas.css';\nimport React from 'react';\nimport { useRef, useEffect } from 'react';\n\nfunction Canvas({ strokeColor, lineWidth, canvasRef }) {\n  const isPainting = useRef(false);\n  let ctx;\n  \n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      alert('canvas not found');\n      return;\n    }\n    ctx = canvas.getContext('2d');\n    if (!ctx) {\n      alert('canvas context not found');\n      return; \n    }\n\n    const canvasOffsetX = canvas.offsetLeft;\n    const canvasOffsetY = canvas.offsetTop;\n\n    canvas.width = window.innerWidth - canvasOffsetX;\n    canvas.height = window.innerHeight - canvasOffsetY;\n\n    let startX;\n    let startY;\n\n    const rect = canvas.getBoundingClientRect();\n\n    function draw(e) {\n      if(!isPainting.current) {\n          return;\n      }\n\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n\n      ctx.lineWidth = lineWidth.current;\n      ctx.lineCap = 'round';\n      ctx.strokeStyle = strokeColor.current;\n\n      // ctx.lineTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n      ctx.lineTo(mouseX, mouseY);\n      ctx.stroke();\n    }\n\n    const handleMouseDown = (e) => {\n      isPainting.current = true;\n      startX = e.clientX - canvasOffsetX;\n      startY = e.clientY - canvasOffsetY;\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      ctx.beginPath();\n      ctx.moveTo(mouseX, mouseY);\n    };\n  \n    const handleMouseUp = (e) => {\n      isPainting.current = false;\n      ctx.closePath();\n    };\n\n    canvas.addEventListener('mousedown', handleMouseDown);\n    canvas.addEventListener('mouseup', handleMouseUp);\n    canvas.addEventListener('mousemove', draw);\n\n    return () => {\n      canvas.removeEventListener('mousedown', handleMouseDown);\n      canvas.removeEventListener('mouseup', handleMouseUp);\n      canvas.removeEventListener('mousemove', draw);\n    };\n}, [lineWidth, strokeColor]);\n\n  return (\n    <div>\n        <canvas id=\"drawingCanvas\" ref={canvasRef}></canvas>\n    </div>\n  );\n}\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}