{"ast":null,"code":"var _jsxFileName = \"/Users/hwoodie/Desktop/Projects/Color Draw/my-app/src/Components/Toolbar.js\",\n  _s = $RefreshSig$();\nimport '../CSS/toolbar.css';\nimport React from 'react';\nimport { useState, useRef, useEffect } from 'react';\n// import { Stage, Layer, Line, Text } from 'react-konva';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Toolbar({\n  strokeColor,\n  setStrokeColor,\n  lineWidth,\n  setLineWidth,\n  clearCanvas\n}) {\n  _s();\n  // const [lineWidth, setLineWidth] = useState(5);\n  // const [strokeColor, setStrokeColor] = useState('#000000');\n  // const isPainting = React.useRef(false);\n  // const canvasRef = useRef(null);\n  const toolbarRef = useRef(null);\n\n  // useEffect(() => {\n  const toolbar = toolbarRef.current;\n  // const canvas = canvasRef.current;\n  // const ctx = canvas.getContext('2d');\n\n  // const canvasOffsetX = canvas.offsetLeft;\n  // const canvasOffsetY = canvas.offsetTop;\n\n  // canvas.width = window.innerWidth - canvasOffsetX;\n  // canvas.height = window.innerHeight - canvasOffsetY;\n\n  // let startX;\n  // let startY;\n\n  // function draw(e) {\n  //   if(!isPainting.current) {\n  //       return;\n  //   }\n\n  //   ctx.lineWidth = lineWidth;\n  //   ctx.lineCap = 'round';\n  //   ctx.strokeStyle = strokeColor;\n\n  //   if (ctx.lineWidth !== lineWidth || ctx.strokeStyle !== strokeColor) {\n  //     // If line width or stroke color has changed, update the context and move to the new position\n  //     ctx.lineWidth = lineWidth;\n  //     ctx.strokeStyle = strokeColor;\n  //     ctx.moveTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n  // }\n\n  //   ctx.lineTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n  //   ctx.stroke();\n  // }\n\n  function handleImage(e) {\n    var reader = new FileReader();\n    reader.onload = function (event) {\n      var img = new Image();\n      img.onload = function () {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.drawImage(img, 0, 0);\n      };\n      img.src = event.target.result;\n    };\n    reader.readAsDataURL(e.target.files[0]);\n  }\n\n  // const handleMouseDown = (e) => {\n  //   isPainting.current = true;\n  //   startX = e.clientX - canvasOffsetX;\n  //   startY = e.clientY - canvasOffsetY;\n  //   ctx.beginPath();\n  //   ctx.moveTo(startX, startY);\n  // };\n\n  // const handleMouseUp = (e) => {\n  //   isPainting.current = false;\n  //   ctx.closePath();\n  // };\n\n  // canvas.addEventListener('mousedown', handleMouseDown);\n  // canvas.addEventListener('mouseup', handleMouseUp);\n  // canvas.addEventListener('mousemove', draw);\n\n  const handleClick = e => {\n    if (e.target.id === 'clear') {\n      clearCanvas();\n    }\n    if (e.target.id === 'save') {\n      var image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n      window.location.href = image; //save locally\n    }\n  };\n  const handleChange = e => {\n    console.log('handleChange called');\n    if (e.target.id === 'stroke') {\n      console.log('stroke color changed:', e.target.value);\n      // ctx.strokeStyle = e.target.value;\n      setStrokeColor(e.target.value);\n    }\n    if (e.target.id === 'lineWidth') {\n      console.log('line width changed:', e.target.value);\n      // ctx.lineWidth = e.target.value;\n      setLineWidth(e.target.value);\n    }\n    if (e.target.id === 'file') {\n      handleImage(e);\n    }\n  };\n\n  // toolbar.addEventListener('click', handleClick);\n  // toolbar.addEventListener('change', handleChange);\n\n  // return () => {\n  //   // canvas.removeEventListener('mousedown', handleMouseDown);\n  //   // canvas.removeEventListener('mouseup', handleMouseUp);\n  //   // canvas.removeEventListener('mousemove', draw);\n  //   toolbar.removeEventListener('click', handleClick);\n  //   toolbar.removeEventListener('change', handleChange);\n  // };\n  // }, [lineWidth, strokeColor]);\n\n  // const handleChange = (e) => {\n  //   const canvas = canvasRef.current;\n  //   const ctx = canvas.getContext('2d');\n  //   console.log('handleChange called');\n  //   if(e.target.id === 'stroke') {\n  //     console.log('stroke color changed:', e.target.value);\n  //       ctx.strokeStyle = e.target.value;\n  //       setStrokeColor(e.target.value);\n  //   }\n  //   if(e.target.id === 'lineWidth') {\n  //     console.log('line width changed:', e.target.value);\n  //       ctx.lineWidth = e.target.value;\n  //       setLineWidth(e.target.value);\n  //   }\n  //   if (e.target.id === 'file') {\n  //       // handleImage(e);\n  //     }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"toolbar\",\n      ref: toolbarRef,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Draw!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"stroke\",\n        children: \"Stroke\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"stroke\",\n        name: \"stroke\",\n        type: \"color\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"lineWidth\",\n        children: \"Line Width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"lineWidth\",\n        name: \"lineWidth\",\n        type: \"number\",\n        value: lineWidth,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"clear\",\n        onClick: handleClick,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"save\",\n        onClick: handleClick,\n        children: \"Download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        onChange: handleChange,\n        children: \"Upload File:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file\",\n        name: \"file\",\n        accept: \"image/png, image/jpeg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Toolbar, \"axGy3IAbMiRj4GzjTalTesJwLWM=\");\n_c = Toolbar;\nexport default Toolbar;\nvar _c;\n$RefreshReg$(_c, \"Toolbar\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Toolbar","strokeColor","setStrokeColor","lineWidth","setLineWidth","clearCanvas","_s","toolbarRef","toolbar","current","handleImage","e","reader","FileReader","onload","event","img","Image","canvas","width","height","ctx","drawImage","src","target","result","readAsDataURL","files","handleClick","id","image","toDataURL","replace","window","location","href","handleChange","console","log","value","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","name","type","onChange","onClick","accept","_c","$RefreshReg$"],"sources":["/Users/hwoodie/Desktop/Projects/Color Draw/my-app/src/Components/Toolbar.js"],"sourcesContent":["import '../CSS/toolbar.css';\nimport React from 'react';\nimport { useState, useRef, useEffect } from 'react';\n// import { Stage, Layer, Line, Text } from 'react-konva';\n\nfunction Toolbar( { strokeColor, setStrokeColor, lineWidth, setLineWidth, clearCanvas } ) {\n  // const [lineWidth, setLineWidth] = useState(5);\n  // const [strokeColor, setStrokeColor] = useState('#000000');\n  // const isPainting = React.useRef(false);\n  // const canvasRef = useRef(null);\n  const toolbarRef = useRef(null);\n  \n  // useEffect(() => {\n    const toolbar = toolbarRef.current;\n    // const canvas = canvasRef.current;\n    // const ctx = canvas.getContext('2d');\n\n    // const canvasOffsetX = canvas.offsetLeft;\n    // const canvasOffsetY = canvas.offsetTop;\n\n    // canvas.width = window.innerWidth - canvasOffsetX;\n    // canvas.height = window.innerHeight - canvasOffsetY;\n\n    // let startX;\n    // let startY;\n\n    // function draw(e) {\n    //   if(!isPainting.current) {\n    //       return;\n    //   }\n\n    //   ctx.lineWidth = lineWidth;\n    //   ctx.lineCap = 'round';\n    //   ctx.strokeStyle = strokeColor;\n\n    //   if (ctx.lineWidth !== lineWidth || ctx.strokeStyle !== strokeColor) {\n    //     // If line width or stroke color has changed, update the context and move to the new position\n    //     ctx.lineWidth = lineWidth;\n    //     ctx.strokeStyle = strokeColor;\n    //     ctx.moveTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n    // }\n\n    //   ctx.lineTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n    //   ctx.stroke();\n    // }\n\n    function handleImage(e){\n      var reader = new FileReader();\n      reader.onload = function(event){\n          var img = new Image();\n          img.onload = function(){\n              canvas.width = img.width;\n              canvas.height = img.height;\n              ctx.drawImage(img,0,0);\n          }\n          img.src = event.target.result;\n      }\n      reader.readAsDataURL(e.target.files[0]);     \n    }\n\n    // const handleMouseDown = (e) => {\n    //   isPainting.current = true;\n    //   startX = e.clientX - canvasOffsetX;\n    //   startY = e.clientY - canvasOffsetY;\n    //   ctx.beginPath();\n    //   ctx.moveTo(startX, startY);\n    // };\n  \n    // const handleMouseUp = (e) => {\n    //   isPainting.current = false;\n    //   ctx.closePath();\n    // };\n\n    // canvas.addEventListener('mousedown', handleMouseDown);\n    // canvas.addEventListener('mouseup', handleMouseUp);\n    // canvas.addEventListener('mousemove', draw);\n\n  \n    const handleClick = (e) => {\n      if (e.target.id === 'clear') {\n          clearCanvas();\n      }\n      if (e.target.id === 'save') {\n        var image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n        window.location.href=image; //save locally\n      }\n    };\n  \n    const handleChange = (e) => {\n      console.log('handleChange called');\n      if(e.target.id === 'stroke') {\n        console.log('stroke color changed:', e.target.value);\n          // ctx.strokeStyle = e.target.value;\n          setStrokeColor(e.target.value);\n      }\n      if(e.target.id === 'lineWidth') {\n        console.log('line width changed:', e.target.value);\n          // ctx.lineWidth = e.target.value;\n          setLineWidth(e.target.value);\n      }\n      if (e.target.id === 'file') {\n          handleImage(e);\n        }\n    };\n\n    // toolbar.addEventListener('click', handleClick);\n    // toolbar.addEventListener('change', handleChange);\n\n    // return () => {\n    //   // canvas.removeEventListener('mousedown', handleMouseDown);\n    //   // canvas.removeEventListener('mouseup', handleMouseUp);\n    //   // canvas.removeEventListener('mousemove', draw);\n    //   toolbar.removeEventListener('click', handleClick);\n    //   toolbar.removeEventListener('change', handleChange);\n    // };\n// }, [lineWidth, strokeColor]);\n\n// const handleChange = (e) => {\n//   const canvas = canvasRef.current;\n//   const ctx = canvas.getContext('2d');\n//   console.log('handleChange called');\n//   if(e.target.id === 'stroke') {\n//     console.log('stroke color changed:', e.target.value);\n//       ctx.strokeStyle = e.target.value;\n//       setStrokeColor(e.target.value);\n//   }\n//   if(e.target.id === 'lineWidth') {\n//     console.log('line width changed:', e.target.value);\n//       ctx.lineWidth = e.target.value;\n//       setLineWidth(e.target.value);\n//   }\n//   if (e.target.id === 'file') {\n//       // handleImage(e);\n//     }\n// };\n\n  return (\n    <>\n      <div id=\"toolbar\" ref={toolbarRef}>\n        <h1>Draw!</h1>\n        <label htmlFor=\"stroke\">Stroke</label>\n        <input id=\"stroke\" name='stroke' type=\"color\" onChange={handleChange}></input>\n        <label htmlFor=\"lineWidth\">Line Width</label>\n        <input id=\"lineWidth\" name='lineWidth' type=\"number\" value={lineWidth} onChange={handleChange}></input>\n        <button id=\"clear\" onClick={handleClick}>Clear</button>\n        <button id=\"save\" onClick={handleClick}>Download</button>\n        <label htmlFor=\"file\" onChange={handleChange}>Upload File:</label>\n        <input type=\"file\" id=\"file\" name=\"file\" accept=\"image/png, image/jpeg\" />\n      </div>\n    </>\n  );\n}\n\nexport default Toolbar;\n"],"mappings":";;AAAA,OAAO,oBAAoB;AAC3B,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACnD;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEA,SAASC,OAAOA,CAAE;EAAEC,WAAW;EAAEC,cAAc;EAAEC,SAAS;EAAEC,YAAY;EAAEC;AAAY,CAAC,EAAG;EAAAC,EAAA;EACxF;EACA;EACA;EACA;EACA,MAAMC,UAAU,GAAGb,MAAM,CAAC,IAAI,CAAC;;EAE/B;EACE,MAAMc,OAAO,GAAGD,UAAU,CAACE,OAAO;EAClC;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,SAASC,WAAWA,CAACC,CAAC,EAAC;IACrB,IAAIC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC7BD,MAAM,CAACE,MAAM,GAAG,UAASC,KAAK,EAAC;MAC3B,IAAIC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MACrBD,GAAG,CAACF,MAAM,GAAG,YAAU;QACnBI,MAAM,CAACC,KAAK,GAAGH,GAAG,CAACG,KAAK;QACxBD,MAAM,CAACE,MAAM,GAAGJ,GAAG,CAACI,MAAM;QAC1BC,GAAG,CAACC,SAAS,CAACN,GAAG,EAAC,CAAC,EAAC,CAAC,CAAC;MAC1B,CAAC;MACDA,GAAG,CAACO,GAAG,GAAGR,KAAK,CAACS,MAAM,CAACC,MAAM;IACjC,CAAC;IACDb,MAAM,CAACc,aAAa,CAACf,CAAC,CAACa,MAAM,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;EACzC;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAGA,MAAMC,WAAW,GAAIjB,CAAC,IAAK;IACzB,IAAIA,CAAC,CAACa,MAAM,CAACK,EAAE,KAAK,OAAO,EAAE;MACzBxB,WAAW,CAAC,CAAC;IACjB;IACA,IAAIM,CAAC,CAACa,MAAM,CAACK,EAAE,KAAK,MAAM,EAAE;MAC1B,IAAIC,KAAK,GAAGZ,MAAM,CAACa,SAAS,CAAC,WAAW,CAAC,CAACC,OAAO,CAAC,WAAW,EAAE,oBAAoB,CAAC;MACpFC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAACL,KAAK,CAAC,CAAC;IAC9B;EACF,CAAC;EAED,MAAMM,YAAY,GAAIzB,CAAC,IAAK;IAC1B0B,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,IAAG3B,CAAC,CAACa,MAAM,CAACK,EAAE,KAAK,QAAQ,EAAE;MAC3BQ,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE3B,CAAC,CAACa,MAAM,CAACe,KAAK,CAAC;MAClD;MACArC,cAAc,CAACS,CAAC,CAACa,MAAM,CAACe,KAAK,CAAC;IAClC;IACA,IAAG5B,CAAC,CAACa,MAAM,CAACK,EAAE,KAAK,WAAW,EAAE;MAC9BQ,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE3B,CAAC,CAACa,MAAM,CAACe,KAAK,CAAC;MAChD;MACAnC,YAAY,CAACO,CAAC,CAACa,MAAM,CAACe,KAAK,CAAC;IAChC;IACA,IAAI5B,CAAC,CAACa,MAAM,CAACK,EAAE,KAAK,MAAM,EAAE;MACxBnB,WAAW,CAACC,CAAC,CAAC;IAChB;EACJ,CAAC;;EAED;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACJ;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEE,oBACEd,OAAA,CAAAE,SAAA;IAAAyC,QAAA,eACE3C,OAAA;MAAKgC,EAAE,EAAC,SAAS;MAACY,GAAG,EAAElC,UAAW;MAAAiC,QAAA,gBAChC3C,OAAA;QAAA2C,QAAA,EAAI;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACdhD,OAAA;QAAOiD,OAAO,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACtChD,OAAA;QAAOgC,EAAE,EAAC,QAAQ;QAACkB,IAAI,EAAC,QAAQ;QAACC,IAAI,EAAC,OAAO;QAACC,QAAQ,EAAEb;MAAa;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC9EhD,OAAA;QAAOiD,OAAO,EAAC,WAAW;QAAAN,QAAA,EAAC;MAAU;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC7ChD,OAAA;QAAOgC,EAAE,EAAC,WAAW;QAACkB,IAAI,EAAC,WAAW;QAACC,IAAI,EAAC,QAAQ;QAACT,KAAK,EAAEpC,SAAU;QAAC8C,QAAQ,EAAEb;MAAa;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACvGhD,OAAA;QAAQgC,EAAE,EAAC,OAAO;QAACqB,OAAO,EAAEtB,WAAY;QAAAY,QAAA,EAAC;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACvDhD,OAAA;QAAQgC,EAAE,EAAC,MAAM;QAACqB,OAAO,EAAEtB,WAAY;QAAAY,QAAA,EAAC;MAAQ;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACzDhD,OAAA;QAAOiD,OAAO,EAAC,MAAM;QAACG,QAAQ,EAAEb,YAAa;QAAAI,QAAA,EAAC;MAAY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAClEhD,OAAA;QAAOmD,IAAI,EAAC,MAAM;QAACnB,EAAE,EAAC,MAAM;QAACkB,IAAI,EAAC,MAAM;QAACI,MAAM,EAAC;MAAuB;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvE;EAAC,gBACN,CAAC;AAEP;AAACvC,EAAA,CAlJQN,OAAO;AAAAoD,EAAA,GAAPpD,OAAO;AAoJhB,eAAeA,OAAO;AAAC,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}