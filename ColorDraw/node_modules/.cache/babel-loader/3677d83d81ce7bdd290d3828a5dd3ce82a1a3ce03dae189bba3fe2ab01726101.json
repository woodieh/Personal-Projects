{"ast":null,"code":"var _jsxFileName = \"/Users/hwoodie/Desktop/Projects/Color Draw/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Toolbar from './Components/Toolbar';\nimport Canvas from './Components/Canvas';\nimport { useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const strokeColor = useRef('#000000');\n  const lineWidth = useRef(5);\n  const canvasRef = useRef(null);\n  const mouseCoordinates = useRef({\n    x: 0,\n    y: 0\n  });\n  let ctx;\n  let canvas;\n  const clearCanvas = () => {\n    ctx = canvasRef.current.getContext('2d');\n    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n  };\n  const saveCanvas = () => {\n    canvas = canvasRef.current;\n    var image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n    window.location.href = image; //save locally\n  };\n  function handleImage(e) {\n    const canvas = canvasRef.current;\n    const ctx = canvasRef.current.getContext('2d');\n    var reader = new FileReader();\n    reader.onload = function (event) {\n      const img = new Image();\n      img.onload = function () {\n        const canvasOffsetX = canvas.offsetLeft;\n        const canvasOffsetY = canvas.offsetTop;\n        canvas.style.height = 'auto';\n        canvas.style.width = 'auto';\n\n        // Save the current canvas size\n        const currentWidth = canvas.width;\n        const currentHeight = canvas.height;\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.drawImage(img, 0, 0);\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        const mouseY = e.clientY - rect.top;\n        console.log(rect);\n\n        // canvas.width = window.innerWidth - canvasOffsetX;\n        // canvas.height = window.innerHeight - canvasOffsetY;\n\n        // Calculate the new pointer's position relative to the resized canvas\n        const newOffsetX = e.clientX / canvas.width * img.width;\n        const newOffsetY = e.clientY / canvas.height * img.height;\n\n        // const mouseX = (currentWidth/canvas.offsetLeft) * img.width;\n        // const mouseY = (currentHeight/canvas.offsetTop) * img.height;\n        mouseCoordinates.current = {\n          x: mouseX,\n          y: mouseY\n        };\n\n        // Move the painting start position to the new pointer's position\n        ctx.beginPath();\n        ctx.moveTo(mouseCoordinates.current.x, mouseCoordinates.current.y);\n      };\n      img.src = event.target.result;\n    };\n    reader.readAsDataURL(e.target.files[0]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n      strokeColor: strokeColor,\n      lineWidth: lineWidth,\n      clearCanvas: clearCanvas,\n      handleImage: handleImage,\n      saveCanvas: saveCanvas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      strokeColor: strokeColor,\n      lineWidth: lineWidth,\n      mouseCoordinates: mouseCoordinates,\n      canvasRef: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"g+zZRLEhtZ/ho4aO5R+S6HKyDFA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Toolbar","Canvas","useRef","jsxDEV","_jsxDEV","App","_s","strokeColor","lineWidth","canvasRef","mouseCoordinates","x","y","ctx","canvas","clearCanvas","current","getContext","clearRect","width","height","saveCanvas","image","toDataURL","replace","window","location","href","handleImage","e","reader","FileReader","onload","event","img","Image","canvasOffsetX","offsetLeft","canvasOffsetY","offsetTop","style","currentWidth","currentHeight","drawImage","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","console","log","newOffsetX","newOffsetY","beginPath","moveTo","src","target","result","readAsDataURL","files","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hwoodie/Desktop/Projects/Color Draw/my-app/src/App.js"],"sourcesContent":["import './App.css';\nimport Toolbar from './Components/Toolbar';\nimport Canvas from './Components/Canvas';\nimport { useRef } from 'react';\n\nfunction App() {\n  const strokeColor = useRef('#000000');\n  const lineWidth = useRef(5);\n  const canvasRef = useRef(null);\n  const mouseCoordinates = useRef({ x: 0, y: 0 });\n  let ctx;\n  let canvas;\n\n  const clearCanvas = () => {\n    ctx = canvasRef.current.getContext('2d');\n    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n  };\n\n  const saveCanvas = () => {\n    canvas = canvasRef.current;\n    var image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n    window.location.href=image; //save locally\n  }\n\n  function handleImage(e){\n    const canvas = canvasRef.current;\n    const ctx = canvasRef.current.getContext('2d');\n    var reader = new FileReader();\n    reader.onload = function(event){\n        const img = new Image();\n        img.onload = function(){\n          const canvasOffsetX = canvas.offsetLeft;\n          const canvasOffsetY = canvas.offsetTop;\n\n          canvas.style.height = 'auto';\n          canvas.style.width = 'auto';\n\n          // Save the current canvas size\n          const currentWidth = canvas.width;\n          const currentHeight = canvas.height;\n          \n          canvas.width = img.width;\n          canvas.height = img.height;\n          ctx.drawImage(img, 0, 0);\n\n          const rect = canvas.getBoundingClientRect();\n          const mouseX = e.clientX - rect.left;\n          const mouseY = e.clientY - rect.top;\n          console.log(rect);\n\n          // canvas.width = window.innerWidth - canvasOffsetX;\n          // canvas.height = window.innerHeight - canvasOffsetY;\n\n          // Calculate the new pointer's position relative to the resized canvas\n          const newOffsetX = (e.clientX/canvas.width * img.width);\n          const newOffsetY = (e.clientY/canvas.height * img.height);\n\n          // const mouseX = (currentWidth/canvas.offsetLeft) * img.width;\n          // const mouseY = (currentHeight/canvas.offsetTop) * img.height;\n          mouseCoordinates.current = {x : mouseX, y : mouseY};\n\n          // Move the painting start position to the new pointer's position\n          ctx.beginPath();\n          ctx.moveTo(mouseCoordinates.current.x, mouseCoordinates.current.y);\n        }\n        img.src = event.target.result;\n    }\n    \n    reader.readAsDataURL(e.target.files[0]);     \n  }\n\n  return (\n      <section className=\"container\">\n      <Toolbar strokeColor={strokeColor}\n        lineWidth={lineWidth}\n        clearCanvas={clearCanvas}\n        handleImage={handleImage}\n        saveCanvas={saveCanvas}/>\n      <Canvas strokeColor={strokeColor} lineWidth={lineWidth} mouseCoordinates={mouseCoordinates} canvasRef = {canvasRef}/>\n    </section>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}