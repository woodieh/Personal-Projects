{"ast":null,"code":"var _jsxFileName = \"/Users/hwoodie/Desktop/Projects/Color Draw/my-app/src/Components/Canvas.js\",\n  _s = $RefreshSig$();\nimport '../CSS/canvas.css';\nimport React from 'react';\nimport { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Canvas({\n  strokeColor,\n  lineWidth\n}) {\n  _s();\n  // const [lineWidth, setLineWidth] = useState(5);\n  // const [strokeColor, setStrokeColor] = useState('#000000');\n  const isPainting = React.useRef(false);\n  const canvasRef = useRef(null);\n  // const toolbarRef = useRef(null);\n\n  useEffect(() => {\n    // const toolbar = toolbarRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const canvasOffsetX = canvas.offsetLeft;\n    const canvasOffsetY = canvas.offsetTop;\n    canvas.width = window.innerWidth - canvasOffsetX;\n    canvas.height = window.innerHeight - canvasOffsetY;\n    let startX;\n    let startY;\n    function draw(e) {\n      if (!isPainting.current) {\n        return;\n      }\n      ctx.lineWidth = lineWidth;\n      ctx.lineCap = 'round';\n      ctx.strokeStyle = strokeColor;\n      if (ctx.lineWidth !== lineWidth || ctx.strokeStyle !== strokeColor) {\n        // If line width or stroke color has changed, update the context and move to the new position\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = strokeColor;\n        ctx.moveTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n      }\n      ctx.lineTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n      ctx.stroke();\n    }\n    function handleImage(e) {\n      var reader = new FileReader();\n      reader.onload = function (event) {\n        var img = new Image();\n        img.onload = function () {\n          canvas.width = img.width;\n          canvas.height = img.height;\n          ctx.drawImage(img, 0, 0);\n        };\n        img.src = event.target.result;\n      };\n      reader.readAsDataURL(e.target.files[0]);\n    }\n    const handleMouseDown = e => {\n      isPainting.current = true;\n      startX = e.clientX - canvasOffsetX;\n      startY = e.clientY - canvasOffsetY;\n      ctx.beginPath();\n      ctx.moveTo(startX, startY);\n    };\n    const handleMouseUp = e => {\n      isPainting.current = false;\n      ctx.closePath();\n    };\n    canvas.addEventListener('mousedown', handleMouseDown);\n    canvas.addEventListener('mouseup', handleMouseUp);\n    canvas.addEventListener('mousemove', draw);\n\n    // const handleClick = (e) => {\n    //   if (e.target.id === 'clear') {\n    //       ctx.clearRect(0, 0, canvas.width, canvas.height);\n    //   }\n    //   if (e.target.id === 'save') {\n    //     var image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n    //     window.location.href=image; //save locally\n    //   }\n    // };\n\n    // const handleChange = (e) => {\n    //   console.log('handleChange called');\n    //   if(e.target.id === 'stroke') {\n    //     console.log('stroke color changed:', e.target.value);\n    //       ctx.strokeStyle = e.target.value;\n    //       setStrokeColor(e.target.value);\n    //   }\n    //   if(e.target.id === 'lineWidth') {\n    //     console.log('line width changed:', e.target.value);\n    //       ctx.lineWidth = e.target.value;\n    //       setLineWidth(e.target.value);\n    //   }\n    //   if (e.target.id === 'file') {\n    //       handleImage(e);\n    //     }\n    // };\n\n    // toolbar.addEventListener('click', handleClick);\n    // toolbar.addEventListener('change', handleChange);\n\n    return () => {\n      canvas.removeEventListener('mousedown', handleMouseDown);\n      canvas.removeEventListener('mouseup', handleMouseUp);\n      canvas.removeEventListener('mousemove', draw);\n      // toolbar.removeEventListener('click', handleClick);\n      // toolbar.removeEventListener('change', handleChange);\n    };\n  }, [lineWidth, strokeColor]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"drawingCanvas\",\n      useRef: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(Canvas, \"FtaxnmcbeanrRg3kkiN76z1+CEM=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","strokeColor","lineWidth","_s","isPainting","canvasRef","canvas","current","ctx","getContext","canvasOffsetX","offsetLeft","canvasOffsetY","offsetTop","width","window","innerWidth","height","innerHeight","startX","startY","draw","e","lineCap","strokeStyle","moveTo","clientX","clientY","lineTo","stroke","handleImage","reader","FileReader","onload","event","img","Image","drawImage","src","target","result","readAsDataURL","files","handleMouseDown","beginPath","handleMouseUp","closePath","addEventListener","removeEventListener","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hwoodie/Desktop/Projects/Color Draw/my-app/src/Components/Canvas.js"],"sourcesContent":["import '../CSS/canvas.css';\nimport React from 'react';\nimport { useRef, useEffect } from 'react';\n\nfunction Canvas({ strokeColor, lineWidth }) {\n  // const [lineWidth, setLineWidth] = useState(5);\n  // const [strokeColor, setStrokeColor] = useState('#000000');\n  const isPainting = React.useRef(false);\n  const canvasRef = useRef(null);\n  // const toolbarRef = useRef(null);\n  \n  useEffect(() => {\n    // const toolbar = toolbarRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    const canvasOffsetX = canvas.offsetLeft;\n    const canvasOffsetY = canvas.offsetTop;\n\n    canvas.width = window.innerWidth - canvasOffsetX;\n    canvas.height = window.innerHeight - canvasOffsetY;\n\n    let startX;\n    let startY;\n\n    function draw(e) {\n      if(!isPainting.current) {\n          return;\n      }\n\n      ctx.lineWidth = lineWidth;\n      ctx.lineCap = 'round';\n      ctx.strokeStyle = strokeColor;\n\n      if (ctx.lineWidth !== lineWidth || ctx.strokeStyle !== strokeColor) {\n        // If line width or stroke color has changed, update the context and move to the new position\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = strokeColor;\n        ctx.moveTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n    }\n\n      ctx.lineTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n      ctx.stroke();\n    }\n\n    function handleImage(e){\n      var reader = new FileReader();\n      reader.onload = function(event){\n          var img = new Image();\n          img.onload = function(){\n              canvas.width = img.width;\n              canvas.height = img.height;\n              ctx.drawImage(img,0,0);\n          }\n          img.src = event.target.result;\n      }\n      reader.readAsDataURL(e.target.files[0]);     \n    }\n\n    const handleMouseDown = (e) => {\n      isPainting.current = true;\n      startX = e.clientX - canvasOffsetX;\n      startY = e.clientY - canvasOffsetY;\n      ctx.beginPath();\n      ctx.moveTo(startX, startY);\n    };\n  \n    const handleMouseUp = (e) => {\n      isPainting.current = false;\n      ctx.closePath();\n    };\n\n    canvas.addEventListener('mousedown', handleMouseDown);\n    canvas.addEventListener('mouseup', handleMouseUp);\n    canvas.addEventListener('mousemove', draw);\n\n  \n    // const handleClick = (e) => {\n    //   if (e.target.id === 'clear') {\n    //       ctx.clearRect(0, 0, canvas.width, canvas.height);\n    //   }\n    //   if (e.target.id === 'save') {\n    //     var image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n    //     window.location.href=image; //save locally\n    //   }\n    // };\n  \n    // const handleChange = (e) => {\n    //   console.log('handleChange called');\n    //   if(e.target.id === 'stroke') {\n    //     console.log('stroke color changed:', e.target.value);\n    //       ctx.strokeStyle = e.target.value;\n    //       setStrokeColor(e.target.value);\n    //   }\n    //   if(e.target.id === 'lineWidth') {\n    //     console.log('line width changed:', e.target.value);\n    //       ctx.lineWidth = e.target.value;\n    //       setLineWidth(e.target.value);\n    //   }\n    //   if (e.target.id === 'file') {\n    //       handleImage(e);\n    //     }\n    // };\n\n    // toolbar.addEventListener('click', handleClick);\n    // toolbar.addEventListener('change', handleChange);\n\n    return () => {\n      canvas.removeEventListener('mousedown', handleMouseDown);\n      canvas.removeEventListener('mouseup', handleMouseUp);\n      canvas.removeEventListener('mousemove', draw);\n      // toolbar.removeEventListener('click', handleClick);\n      // toolbar.removeEventListener('change', handleChange);\n    };\n}, [lineWidth, strokeColor]);\n\n  return (\n    <div>\n        <canvas id=\"drawingCanvas\" useRef={canvasRef}></canvas>\n    </div>\n  );\n}\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}