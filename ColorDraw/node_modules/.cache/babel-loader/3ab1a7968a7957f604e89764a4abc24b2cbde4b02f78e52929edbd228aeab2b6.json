{"ast":null,"code":"var _jsxFileName = \"/Users/hwoodie/Desktop/Projects/Color Draw/my-app/src/Components/Toolbar.js\",\n  _s = $RefreshSig$();\nimport '../CSS/toolbar.css';\nimport React from 'react';\nimport { useState, useRef, useEffect } from 'react';\n// import { Stage, Layer, Line, Text } from 'react-konva';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Toolbar() {\n  _s();\n  const [lineWidth, setWidth] = React.useState(5);\n  const isPainting = React.useRef(false);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const canvasOffsetX = canvas.offsetLeft;\n    const canvasOffsetY = canvas.offsetTop;\n    canvas.width = window.innerWidth - canvasOffsetX;\n    canvas.height = window.innerHeight - canvasOffsetY;\n    let startX;\n    let startY;\n    const draw = e => {\n      if (!isPainting.current) {\n        return;\n      }\n      ctx.lineWidth = lineWidth;\n      ctx.lineCap = 'round';\n      ctx.lineTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n      ctx.stroke();\n    };\n    canvas.addEventListener('mousedown', e => {\n      isPainting.current = true;\n      startX = e.clientX - canvasOffsetX;\n      startY = e.clientY - canvasOffsetY;\n      ctx.beginPath();\n      ctx.moveTo(startX, startY);\n    });\n    canvas.addEventListener('mouseup', e => {\n      isPainting.current = false;\n      ctx.closePath();\n    });\n    canvas.addEventListener('mousemove', draw);\n    canvas.addEventListener('mousedown', handleMouseDown);\n    canvas.addEventListener('mouseup', handleMouseUp);\n    canvas.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      canvas.removeEventListener('mousedown', handleMouseDown);\n      canvas.removeEventListener('mouseup', handleMouseUp);\n      canvas.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [lineWidth]);\n\n  // const canvasOffsetX = canvas.offsetLeft;\n  // const canvasOffsetY = canvas.offsetTop;\n\n  // canvas.width = window.innerWidth - canvasOffsetX;\n  // canvas.height = window.innerHeight - canvasOffsetY;\n\n  // let startX;\n  // let startY;\n\n  // const draw = (e) => {\n  //   if(!isPainting.current) {\n  //       return;\n  //   }\n\n  //   ctx.lineWidth = lineWidth;\n  //   ctx.lineCap = 'round';\n\n  //   ctx.lineTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n  //   ctx.stroke();\n  // }\n\n  // function handleImage(e){\n  //   var reader = new FileReader();\n  //   reader.onload = function(event){\n  //       var img = new Image();\n  //       img.onload = function(){\n  //           canvas.width = img.width;\n  //           canvas.height = img.height;\n  //           ctx.drawImage(img,0,0);\n  //       }\n  //       img.src = event.target.result;\n  //   }\n  //   reader.readAsDataURL(e.target.files[0]);     \n  // }\n\n  // toolbar.addEventListener('click', e => {\n  //   if (e.target.id === 'clear') {\n  //       ctx.clearRect(0, 0, canvas.width, canvas.height);\n  //   }\n  //   if (e.target.id === 'save') {\n  //     var image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n  //     window.location.href=image; //save locally\n  //   }\n  // });\n\n  // toolbar.addEventListener('change', e => {\n  //   if(e.target.id === 'stroke') {\n  //       ctx.strokeStyle = e.target.value;\n  //   }\n\n  //   if(e.target.id === 'lineWidth') {\n  //       lineWidth = e.target.value;\n  //   }\n\n  //   if (e.target.id === 'file') {\n  //       handleImage(e);\n  //     }\n  // });\n\n  // canvas.addEventListener('mousedown', (e) => {\n  //   isPainting.current = true;\n  // const pos = e.target.getStage().getPointerPosition();\n  // setLines([...lines, { tool, points: [pos.x, pos.y] }]);\n\n  //   startX = e.clientX - canvasOffsetX;\n  //   startY = e.clientY - canvasOffsetY;\n  //   ctx.beginPath();\n  //   ctx.moveTo(startX, startY);\n  // });\n\n  // canvas.addEventListener('mouseup', e => {\n  //   isPainting.current = false;\n  //   ctx.closePath();\n  // });\n\n  // canvas.addEventListener('mousemove', draw);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Draw!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"stroke\",\n        children: \"Stroke\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"stroke\",\n        name: \"stroke\",\n        type: \"color\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"lineWidth\",\n        children: \"Line Width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"lineWidth\",\n        name: \"lineWidth\",\n        type: \"number\",\n        value: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"clear\",\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"save\",\n        children: \"Download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"file\",\n        children: \"Upload File:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file\",\n        name: \"file\",\n        accept: \"image/png, image/jpeg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"drawingCanvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Toolbar, \"LM6jMiOAiI8hxQXglJhjCN7vJac=\");\n_c = Toolbar;\nexport default Toolbar;\nvar _c;\n$RefreshReg$(_c, \"Toolbar\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Toolbar","_s","lineWidth","setWidth","isPainting","canvasRef","canvas","current","ctx","getContext","canvasOffsetX","offsetLeft","canvasOffsetY","offsetTop","width","window","innerWidth","height","innerHeight","startX","startY","draw","e","lineCap","lineTo","clientX","clientY","stroke","addEventListener","beginPath","moveTo","closePath","handleMouseDown","handleMouseUp","handleMouseMove","removeEventListener","children","id","fileName","_jsxFileName","lineNumber","columnNumber","for","name","type","value","accept","_c","$RefreshReg$"],"sources":["/Users/hwoodie/Desktop/Projects/Color Draw/my-app/src/Components/Toolbar.js"],"sourcesContent":["import '../CSS/toolbar.css';\nimport React from 'react';\nimport { useState, useRef, useEffect } from 'react';\n// import { Stage, Layer, Line, Text } from 'react-konva';\n\nfunction Toolbar() {\n  const [lineWidth, setWidth] = React.useState(5);\n  const isPainting = React.useRef(false);\n  const canvasRef = useRef(null);\n  \n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    const canvasOffsetX = canvas.offsetLeft;\n    const canvasOffsetY = canvas.offsetTop;\n\n    canvas.width = window.innerWidth - canvasOffsetX;\n    canvas.height = window.innerHeight - canvasOffsetY;\n\n    let startX;\n    let startY;\n\n    const draw = (e) => {\n      if(!isPainting.current) {\n          return;\n      }\n  \n      ctx.lineWidth = lineWidth;\n      ctx.lineCap = 'round';\n  \n      ctx.lineTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n      ctx.stroke();\n    }\n\n    canvas.addEventListener('mousedown', (e) => {\n      isPainting.current = true;\n      startX = e.clientX - canvasOffsetX;\n      startY = e.clientY - canvasOffsetY;\n      ctx.beginPath();\n      ctx.moveTo(startX, startY);\n    });\n  \n    canvas.addEventListener('mouseup', e => {\n      isPainting.current = false;\n      ctx.closePath();\n    });\n  \n    canvas.addEventListener('mousemove', draw);\n\n    canvas.addEventListener('mousedown', handleMouseDown);\n    canvas.addEventListener('mouseup', handleMouseUp);\n    canvas.addEventListener('mousemove', handleMouseMove);\n\n    return () => {\n      canvas.removeEventListener('mousedown', handleMouseDown);\n      canvas.removeEventListener('mouseup', handleMouseUp);\n      canvas.removeEventListener('mousemove', handleMouseMove);\n    };\n\n  }, [lineWidth]);\n\n  // const canvasOffsetX = canvas.offsetLeft;\n  // const canvasOffsetY = canvas.offsetTop;\n\n  // canvas.width = window.innerWidth - canvasOffsetX;\n  // canvas.height = window.innerHeight - canvasOffsetY;\n\n  // let startX;\n  // let startY;\n\n  // const draw = (e) => {\n  //   if(!isPainting.current) {\n  //       return;\n  //   }\n\n  //   ctx.lineWidth = lineWidth;\n  //   ctx.lineCap = 'round';\n\n  //   ctx.lineTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n  //   ctx.stroke();\n  // }\n\n  // function handleImage(e){\n  //   var reader = new FileReader();\n  //   reader.onload = function(event){\n  //       var img = new Image();\n  //       img.onload = function(){\n  //           canvas.width = img.width;\n  //           canvas.height = img.height;\n  //           ctx.drawImage(img,0,0);\n  //       }\n  //       img.src = event.target.result;\n  //   }\n  //   reader.readAsDataURL(e.target.files[0]);     \n  // }\n\n  // toolbar.addEventListener('click', e => {\n  //   if (e.target.id === 'clear') {\n  //       ctx.clearRect(0, 0, canvas.width, canvas.height);\n  //   }\n  //   if (e.target.id === 'save') {\n  //     var image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n  //     window.location.href=image; //save locally\n  //   }\n  // });\n\n  // toolbar.addEventListener('change', e => {\n  //   if(e.target.id === 'stroke') {\n  //       ctx.strokeStyle = e.target.value;\n  //   }\n\n  //   if(e.target.id === 'lineWidth') {\n  //       lineWidth = e.target.value;\n  //   }\n\n  //   if (e.target.id === 'file') {\n  //       handleImage(e);\n  //     }\n  // });\n\n  // canvas.addEventListener('mousedown', (e) => {\n  //   isPainting.current = true;\n    // const pos = e.target.getStage().getPointerPosition();\n    // setLines([...lines, { tool, points: [pos.x, pos.y] }]);\n  \n  //   startX = e.clientX - canvasOffsetX;\n  //   startY = e.clientY - canvasOffsetY;\n  //   ctx.beginPath();\n  //   ctx.moveTo(startX, startY);\n  // });\n\n  // canvas.addEventListener('mouseup', e => {\n  //   isPainting.current = false;\n  //   ctx.closePath();\n  // });\n\n  // canvas.addEventListener('mousemove', draw);\n\n  return (\n    <>\n      <div id=\"toolbar\">\n        <h1>Draw!</h1>\n        <label for=\"stroke\">Stroke</label>\n        <input id=\"stroke\" name='stroke' type=\"color\"></input>\n        <label for=\"lineWidth\">Line Width</label>\n        <input id=\"lineWidth\" name='lineWidth' type=\"number\" value=\"5\"></input>\n        <button id=\"clear\">Clear</button>\n        <button id=\"save\">Download</button>\n        <label for=\"file\">Upload File:</label>\n        <input type=\"file\" id=\"file\" name=\"file\" accept=\"image/png, image/jpeg\" />\n      </div>\n      <div>\n        <canvas id=\"drawingCanvas\"></canvas>\n      </div>\n    </>\n  );\n}\n\nexport default Toolbar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}