{"ast":null,"code":"var _jsxFileName = \"/Users/hwoodie/Desktop/Projects/Color Draw/my-app/src/Components/Toolbar.js\",\n  _s = $RefreshSig$();\nimport '../CSS/toolbar.css';\nimport React from 'react';\nimport { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Toolbar({\n  strokeColor,\n  setStrokeColor,\n  lineWidth,\n  setLineWidth,\n  clearCanvas,\n  handleImage\n}) {\n  _s();\n  // const [lineWidth, setLineWidth] = useState(5);\n  // const [strokeColor, setStrokeColor] = useState('#000000');\n  // const isPainting = React.useRef(false);\n  // const canvasRef = useRef(null);\n  const toolbarRef = useRef(null);\n\n  // useEffect(() => {\n  const toolbar = toolbarRef.current;\n\n  // function handleImage(e){\n  //   var reader = new FileReader();\n  //   reader.onload = function(event){\n  //       var img = new Image();\n  //       img.onload = function(){\n  //           canvas.width = img.width;\n  //           canvas.height = img.height;\n  //           ctx.drawImage(img,0,0);\n  //       }\n  //       img.src = event.target.result;\n  //   }\n  //   reader.readAsDataURL(e.target.files[0]);     \n  // }\n\n  const handleClick = e => {\n    if (e.target.id === 'clear') {\n      clearCanvas();\n    }\n    if (e.target.id === 'save') {\n      // var image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n      // window.location.href=image; //save locally\n    }\n  };\n  const handleChange = e => {\n    if (e.target.id === 'stroke') {\n      setStrokeColor(e.target.value);\n    }\n    if (e.target.id === 'lineWidth') {\n      setLineWidth(e.target.value);\n    }\n    if (e.target.id === 'file') {\n      handleImage(e);\n    }\n  };\n\n  // toolbar.addEventListener('click', handleClick);\n  // toolbar.addEventListener('change', handleChange);\n\n  // return () => {\n  //   // canvas.removeEventListener('mousedown', handleMouseDown);\n  //   // canvas.removeEventListener('mouseup', handleMouseUp);\n  //   // canvas.removeEventListener('mousemove', draw);\n  //   toolbar.removeEventListener('click', handleClick);\n  //   toolbar.removeEventListener('change', handleChange);\n  // };\n  // }, [lineWidth, strokeColor]);\n\n  // const handleChange = (e) => {\n  //   const canvas = canvasRef.current;\n  //   const ctx = canvas.getContext('2d');\n  //   console.log('handleChange called');\n  //   if(e.target.id === 'stroke') {\n  //     console.log('stroke color changed:', e.target.value);\n  //       ctx.strokeStyle = e.target.value;\n  //       setStrokeColor(e.target.value);\n  //   }\n  //   if(e.target.id === 'lineWidth') {\n  //     console.log('line width changed:', e.target.value);\n  //       ctx.lineWidth = e.target.value;\n  //       setLineWidth(e.target.value);\n  //   }\n  //   if (e.target.id === 'file') {\n  //       // handleImage(e);\n  //     }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"toolbar\",\n      ref: toolbarRef,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Draw!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"stroke\",\n        children: \"Stroke\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"stroke\",\n        name: \"stroke\",\n        type: \"color\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"lineWidth\",\n        children: \"Line Width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"lineWidth\",\n        name: \"lineWidth\",\n        type: \"number\",\n        value: lineWidth,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"clear\",\n        onClick: handleClick,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"save\",\n        onClick: handleClick,\n        children: \"Download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: \"Upload File:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file\",\n        name: \"file\",\n        accept: \"image/png, image/jpeg\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Toolbar, \"axGy3IAbMiRj4GzjTalTesJwLWM=\");\n_c = Toolbar;\nexport default Toolbar;\nvar _c;\n$RefreshReg$(_c, \"Toolbar\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Toolbar","strokeColor","setStrokeColor","lineWidth","setLineWidth","clearCanvas","handleImage","_s","toolbarRef","toolbar","current","handleClick","e","target","id","handleChange","value","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","name","type","onChange","onClick","accept","_c","$RefreshReg$"],"sources":["/Users/hwoodie/Desktop/Projects/Color Draw/my-app/src/Components/Toolbar.js"],"sourcesContent":["import '../CSS/toolbar.css';\nimport React from 'react';\nimport { useState, useRef, useEffect } from 'react';\n\nfunction Toolbar( { strokeColor, setStrokeColor, lineWidth, setLineWidth, clearCanvas, handleImage } ) {\n  // const [lineWidth, setLineWidth] = useState(5);\n  // const [strokeColor, setStrokeColor] = useState('#000000');\n  // const isPainting = React.useRef(false);\n  // const canvasRef = useRef(null);\n  const toolbarRef = useRef(null);\n  \n  // useEffect(() => {\n    const toolbar = toolbarRef.current;\n\n    // function handleImage(e){\n    //   var reader = new FileReader();\n    //   reader.onload = function(event){\n    //       var img = new Image();\n    //       img.onload = function(){\n    //           canvas.width = img.width;\n    //           canvas.height = img.height;\n    //           ctx.drawImage(img,0,0);\n    //       }\n    //       img.src = event.target.result;\n    //   }\n    //   reader.readAsDataURL(e.target.files[0]);     \n    // }\n\n  \n    const handleClick = (e) => {\n      if (e.target.id === 'clear') {\n          clearCanvas();\n      }\n      if (e.target.id === 'save') {\n        // var image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n        // window.location.href=image; //save locally\n      }\n    };\n  \n    const handleChange = (e) => {\n      if(e.target.id === 'stroke') {\n        setStrokeColor(e.target.value);\n      }\n      if(e.target.id === 'lineWidth') {\n        setLineWidth(e.target.value);\n      }\n      if (e.target.id === 'file') {\n          handleImage(e);\n        }\n    };\n\n    // toolbar.addEventListener('click', handleClick);\n    // toolbar.addEventListener('change', handleChange);\n\n    // return () => {\n    //   // canvas.removeEventListener('mousedown', handleMouseDown);\n    //   // canvas.removeEventListener('mouseup', handleMouseUp);\n    //   // canvas.removeEventListener('mousemove', draw);\n    //   toolbar.removeEventListener('click', handleClick);\n    //   toolbar.removeEventListener('change', handleChange);\n    // };\n// }, [lineWidth, strokeColor]);\n\n// const handleChange = (e) => {\n//   const canvas = canvasRef.current;\n//   const ctx = canvas.getContext('2d');\n//   console.log('handleChange called');\n//   if(e.target.id === 'stroke') {\n//     console.log('stroke color changed:', e.target.value);\n//       ctx.strokeStyle = e.target.value;\n//       setStrokeColor(e.target.value);\n//   }\n//   if(e.target.id === 'lineWidth') {\n//     console.log('line width changed:', e.target.value);\n//       ctx.lineWidth = e.target.value;\n//       setLineWidth(e.target.value);\n//   }\n//   if (e.target.id === 'file') {\n//       // handleImage(e);\n//     }\n// };\n\n  return (\n    <>\n      <div id=\"toolbar\" ref={toolbarRef}>\n        <h1>Draw!</h1>\n        <label htmlFor=\"stroke\">Stroke</label>\n        <input id=\"stroke\" name='stroke' type=\"color\" onChange={handleChange}></input>\n        <label htmlFor=\"lineWidth\">Line Width</label>\n        <input id=\"lineWidth\" name='lineWidth' type=\"number\" value={lineWidth} onChange={handleChange}></input>\n        <button id=\"clear\" onClick={handleClick}>Clear</button>\n        <button id=\"save\" onClick={handleClick}>Download</button>\n        <label htmlFor=\"file\" >Upload File:</label>\n        <input type=\"file\" id=\"file\" name=\"file\" accept=\"image/png, image/jpeg\" onChange={handleChange} />\n      </div>\n    </>\n  );\n}\n\nexport default Toolbar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}