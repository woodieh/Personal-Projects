{"ast":null,"code":"var _jsxFileName = \"/Users/hwoodie/Desktop/Projects/Color Draw/my-app/src/Components/Toolbar.js\",\n  _s = $RefreshSig$();\nimport '../CSS/toolbar.css';\nimport React from 'react';\nimport { useState, useRef, useEffect } from 'react';\n// import { Stage, Layer, Line, Text } from 'react-konva';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Toolbar({\n  strokeColor,\n  setStrokeColor,\n  lineWidth,\n  setLineWidth,\n  clearCanvas\n}) {\n  _s();\n  // const [lineWidth, setLineWidth] = useState(5);\n  // const [strokeColor, setStrokeColor] = useState('#000000');\n  // const isPainting = React.useRef(false);\n  // const canvasRef = useRef(null);\n  const toolbarRef = useRef(null);\n  useEffect(() => {\n    const toolbar = toolbarRef.current;\n    // const canvas = canvasRef.current;\n    // const ctx = canvas.getContext('2d');\n\n    // const canvasOffsetX = canvas.offsetLeft;\n    // const canvasOffsetY = canvas.offsetTop;\n\n    // canvas.width = window.innerWidth - canvasOffsetX;\n    // canvas.height = window.innerHeight - canvasOffsetY;\n\n    // let startX;\n    // let startY;\n\n    // function draw(e) {\n    //   if(!isPainting.current) {\n    //       return;\n    //   }\n\n    //   ctx.lineWidth = lineWidth;\n    //   ctx.lineCap = 'round';\n    //   ctx.strokeStyle = strokeColor;\n\n    //   if (ctx.lineWidth !== lineWidth || ctx.strokeStyle !== strokeColor) {\n    //     // If line width or stroke color has changed, update the context and move to the new position\n    //     ctx.lineWidth = lineWidth;\n    //     ctx.strokeStyle = strokeColor;\n    //     ctx.moveTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n    // }\n\n    //   ctx.lineTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n    //   ctx.stroke();\n    // }\n\n    // function handleImage(e){\n    //   var reader = new FileReader();\n    //   reader.onload = function(event){\n    //       var img = new Image();\n    //       img.onload = function(){\n    //           canvas.width = img.width;\n    //           canvas.height = img.height;\n    //           ctx.drawImage(img,0,0);\n    //       }\n    //       img.src = event.target.result;\n    //   }\n    //   reader.readAsDataURL(e.target.files[0]);     \n    // }\n\n    // const handleMouseDown = (e) => {\n    //   isPainting.current = true;\n    //   startX = e.clientX - canvasOffsetX;\n    //   startY = e.clientY - canvasOffsetY;\n    //   ctx.beginPath();\n    //   ctx.moveTo(startX, startY);\n    // };\n\n    // const handleMouseUp = (e) => {\n    //   isPainting.current = false;\n    //   ctx.closePath();\n    // };\n\n    // canvas.addEventListener('mousedown', handleMouseDown);\n    // canvas.addEventListener('mouseup', handleMouseUp);\n    // canvas.addEventListener('mousemove', draw);\n\n    const handleClick = e => {\n      if (e.target.id === 'clear') {\n        clearCanvas();\n      }\n      if (e.target.id === 'save') {\n        var image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n        window.location.href = image; //save locally\n      }\n    };\n    const handleChange = e => {\n      console.log('handleChange called');\n      if (e.target.id === 'stroke') {\n        console.log('stroke color changed:', e.target.value);\n        // ctx.strokeStyle = e.target.value;\n        setStrokeColor(e.target.value);\n      }\n      if (e.target.id === 'lineWidth') {\n        console.log('line width changed:', e.target.value);\n        // ctx.lineWidth = e.target.value;\n        setLineWidth(e.target.value);\n      }\n      if (e.target.id === 'file') {\n        handleImage(e);\n      }\n    };\n    toolbar.addEventListener('click', handleClick);\n    toolbar.addEventListener('change', handleChange);\n    return () => {\n      // canvas.removeEventListener('mousedown', handleMouseDown);\n      // canvas.removeEventListener('mouseup', handleMouseUp);\n      // canvas.removeEventListener('mousemove', draw);\n      toolbar.removeEventListener('click', handleClick);\n      toolbar.removeEventListener('change', handleChange);\n    };\n  }, [lineWidth, strokeColor]);\n\n  // const handleChange = (e) => {\n  //   const canvas = canvasRef.current;\n  //   const ctx = canvas.getContext('2d');\n  //   console.log('handleChange called');\n  //   if(e.target.id === 'stroke') {\n  //     console.log('stroke color changed:', e.target.value);\n  //       ctx.strokeStyle = e.target.value;\n  //       setStrokeColor(e.target.value);\n  //   }\n  //   if(e.target.id === 'lineWidth') {\n  //     console.log('line width changed:', e.target.value);\n  //       ctx.lineWidth = e.target.value;\n  //       setLineWidth(e.target.value);\n  //   }\n  //   if (e.target.id === 'file') {\n  //       // handleImage(e);\n  //     }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"toolbar\",\n      ref: toolbarRef,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Draw!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"stroke\",\n        children: \"Stroke\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"stroke\",\n        name: \"stroke\",\n        type: \"color\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"lineWidth\",\n        children: \"Line Width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"lineWidth\",\n        name: \"lineWidth\",\n        type: \"number\",\n        value: lineWidth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"clear\",\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"save\",\n        children: \"Download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: \"Upload File:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file\",\n        name: \"file\",\n        accept: \"image/png, image/jpeg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Toolbar, \"OSf+HYz9aGKjXRKblUWzgshuDso=\");\n_c = Toolbar;\nexport default Toolbar;\nvar _c;\n$RefreshReg$(_c, \"Toolbar\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Toolbar","strokeColor","setStrokeColor","lineWidth","setLineWidth","clearCanvas","_s","toolbarRef","toolbar","current","handleClick","e","target","id","image","canvas","toDataURL","replace","window","location","href","handleChange","console","log","value","handleImage","addEventListener","removeEventListener","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","name","type","accept","_c","$RefreshReg$"],"sources":["/Users/hwoodie/Desktop/Projects/Color Draw/my-app/src/Components/Toolbar.js"],"sourcesContent":["import '../CSS/toolbar.css';\nimport React from 'react';\nimport { useState, useRef, useEffect } from 'react';\n// import { Stage, Layer, Line, Text } from 'react-konva';\n\nfunction Toolbar( { strokeColor, setStrokeColor, lineWidth, setLineWidth, clearCanvas } ) {\n  // const [lineWidth, setLineWidth] = useState(5);\n  // const [strokeColor, setStrokeColor] = useState('#000000');\n  // const isPainting = React.useRef(false);\n  // const canvasRef = useRef(null);\n  const toolbarRef = useRef(null);\n  \n  useEffect(() => {\n    const toolbar = toolbarRef.current;\n    // const canvas = canvasRef.current;\n    // const ctx = canvas.getContext('2d');\n\n    // const canvasOffsetX = canvas.offsetLeft;\n    // const canvasOffsetY = canvas.offsetTop;\n\n    // canvas.width = window.innerWidth - canvasOffsetX;\n    // canvas.height = window.innerHeight - canvasOffsetY;\n\n    // let startX;\n    // let startY;\n\n    // function draw(e) {\n    //   if(!isPainting.current) {\n    //       return;\n    //   }\n\n    //   ctx.lineWidth = lineWidth;\n    //   ctx.lineCap = 'round';\n    //   ctx.strokeStyle = strokeColor;\n\n    //   if (ctx.lineWidth !== lineWidth || ctx.strokeStyle !== strokeColor) {\n    //     // If line width or stroke color has changed, update the context and move to the new position\n    //     ctx.lineWidth = lineWidth;\n    //     ctx.strokeStyle = strokeColor;\n    //     ctx.moveTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n    // }\n\n    //   ctx.lineTo(e.clientX - canvasOffsetX, e.clientY - canvasOffsetY);\n    //   ctx.stroke();\n    // }\n\n    // function handleImage(e){\n    //   var reader = new FileReader();\n    //   reader.onload = function(event){\n    //       var img = new Image();\n    //       img.onload = function(){\n    //           canvas.width = img.width;\n    //           canvas.height = img.height;\n    //           ctx.drawImage(img,0,0);\n    //       }\n    //       img.src = event.target.result;\n    //   }\n    //   reader.readAsDataURL(e.target.files[0]);     \n    // }\n\n    // const handleMouseDown = (e) => {\n    //   isPainting.current = true;\n    //   startX = e.clientX - canvasOffsetX;\n    //   startY = e.clientY - canvasOffsetY;\n    //   ctx.beginPath();\n    //   ctx.moveTo(startX, startY);\n    // };\n  \n    // const handleMouseUp = (e) => {\n    //   isPainting.current = false;\n    //   ctx.closePath();\n    // };\n\n    // canvas.addEventListener('mousedown', handleMouseDown);\n    // canvas.addEventListener('mouseup', handleMouseUp);\n    // canvas.addEventListener('mousemove', draw);\n\n  \n    const handleClick = (e) => {\n      if (e.target.id === 'clear') {\n          clearCanvas();\n      }\n      if (e.target.id === 'save') {\n        var image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n        window.location.href=image; //save locally\n      }\n    };\n  \n    const handleChange = (e) => {\n      console.log('handleChange called');\n      if(e.target.id === 'stroke') {\n        console.log('stroke color changed:', e.target.value);\n          // ctx.strokeStyle = e.target.value;\n          setStrokeColor(e.target.value);\n      }\n      if(e.target.id === 'lineWidth') {\n        console.log('line width changed:', e.target.value);\n          // ctx.lineWidth = e.target.value;\n          setLineWidth(e.target.value);\n      }\n      if (e.target.id === 'file') {\n          handleImage(e);\n        }\n    };\n\n    toolbar.addEventListener('click', handleClick);\n    toolbar.addEventListener('change', handleChange);\n\n    return () => {\n      // canvas.removeEventListener('mousedown', handleMouseDown);\n      // canvas.removeEventListener('mouseup', handleMouseUp);\n      // canvas.removeEventListener('mousemove', draw);\n      toolbar.removeEventListener('click', handleClick);\n      toolbar.removeEventListener('change', handleChange);\n    };\n}, [lineWidth, strokeColor]);\n\n// const handleChange = (e) => {\n//   const canvas = canvasRef.current;\n//   const ctx = canvas.getContext('2d');\n//   console.log('handleChange called');\n//   if(e.target.id === 'stroke') {\n//     console.log('stroke color changed:', e.target.value);\n//       ctx.strokeStyle = e.target.value;\n//       setStrokeColor(e.target.value);\n//   }\n//   if(e.target.id === 'lineWidth') {\n//     console.log('line width changed:', e.target.value);\n//       ctx.lineWidth = e.target.value;\n//       setLineWidth(e.target.value);\n//   }\n//   if (e.target.id === 'file') {\n//       // handleImage(e);\n//     }\n// };\n\n  return (\n    <>\n      <div id=\"toolbar\" ref={toolbarRef}>\n        <h1>Draw!</h1>\n        <label htmlFor=\"stroke\">Stroke</label>\n        <input id=\"stroke\" name='stroke' type=\"color\"></input>\n        <label htmlFor=\"lineWidth\">Line Width</label>\n        <input id=\"lineWidth\" name='lineWidth' type=\"number\" value={lineWidth}></input>\n        <button id=\"clear\">Clear</button>\n        <button id=\"save\">Download</button>\n        <label htmlFor=\"file\">Upload File:</label>\n        <input type=\"file\" id=\"file\" name=\"file\" accept=\"image/png, image/jpeg\" />\n      </div>\n    </>\n  );\n}\n\nexport default Toolbar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}